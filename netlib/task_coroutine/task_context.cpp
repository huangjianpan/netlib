#include "task_context.h"

__asm(
    ".text\n"
    ".globl task_coroutine_jump_fcontext\n"
    ".type task_coroutine_jump_fcontext,@function\n"
    ".align 16\n"
    "task_coroutine_jump_fcontext:\n"
    "    pushq  %rbp  \n"
    "    pushq  %rbx  \n"
    "    pushq  %r15  \n"
    "    pushq  %r14  \n"
    "    pushq  %r13  \n"
    "    pushq  %r12  \n"
    "    leaq  -0x8(%rsp), %rsp\n"
    "    movq  %rsp, (%rdi)\n"
    "    movq  %rsi, %rsp\n"
    "    leaq  0x8(%rsp), %rsp\n"
    "    popq  %r12  \n"
    "    popq  %r13  \n"
    "    popq  %r14  \n"
    "    popq  %r15  \n"
    "    popq  %rbx  \n"
    "    popq  %rbp  \n"
    "    popq  %r8\n"
    "    jmp  *%r8\n"
    ".size task_coroutine_jump_fcontext,.-task_coroutine_jump_fcontext\n"
    ".section .note.GNU-stack,\"\",%progbits\n"
    ".previous\n");

__asm(
    ".text\n"
    ".global task_coroutine_make_fcontext\n"
    ".type task_coroutine_make_fcontext, @function\n"
    ".align 16\n"
    "task_coroutine_make_fcontext:\n"
    "   movq    %rdi, %rax\n"
    "   andq    $-16, %rax\n"
    "   leaq    -0x48(%rax), %rax\n"
    "   movq    %rsi, 0x38(%rax)\n"
    "   leaq    finish(%rip), %rcx\n"
    "   movq    %rcx, 0x40(%rax)\n"
    "   ret\n"
    "finish:\n"
    "   xorq    %rdi, %rdi\n"
    "   call    _exit@PLT\n"
    "   hlt\n");